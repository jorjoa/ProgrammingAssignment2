dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir="diet_data")
list.files("diet_data")
andy<-read.csv("diet_data/David.csv")
head (andy)
length (andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
andy[30, "weight"]
andy[30, "Weight"]
andy_start <-andy[1,"Weight"]
andy_start
andy_end <- andy[30,"Weight"]
andy_loss <- andy_start - andy_end
andy_loss
andy<-read.csv("diet_data/Andy.csv")
head(andy)
andy_start <- andy[1, "weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
head (andy)
summary (andy)
andy_start andy[1, "Weight"]
andy_start <- andy[1,"Weight"]
andy_start
andy_end <- andy[30,"Weight"]
andy_end
andy_loss <- andy_start - andy_end
andy_loss
list.files()
files <- list.files ("diet_data")
files
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
head(read.csv(files[2]))
files[2]
read.csv(files[2])
files_full <- list.files("diet_data", full.names=TRUE)
files.full
files_full
head(read.csv(files_full[3]))
andy_david <-rbind(andy, read.csv(files_full[2]))
head (andy_david)
tail(andy_david)
day_25 <-andy_david[which(andy_david$Day == 25)]
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- c(sqrt(z-1))
my_sqrt(z-1)
my_sqrt <- sqrt (z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0,10)
c (1, 2, 3, 4)+ c(0,10,100)
c (1, 2, 3, 4)+ c(0,10,1000)
z*2+1000
my_div
bye()
library.slidyfy
library-slidify
library.slidify
library(slidify)
slidify()
library(swirl)
swirl()
getwd()
ls()
x <-9
ls()
list.files()
?list.files
args(list.files)
old.dir <- ls()
old.dir <-getwd()
dir.create(testdir)
?dir.create
testdir <- dir.create
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
eaef
folder1 <- file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create()
dir.create("testdir2")
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
unlink(file.path("folder2", "folder3"),recursive=TRUE)
getwd()
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
library(swirl)
swirl()
1:20
pi:10
15:1
':'
`:`
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_cect <- c(0.5, 55,-10,6)
num_vect <- c(0.5, 55, -10.6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect
tf <- num_vect <1
tf
num_vect >=6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name=c("my_char", Jordi)
my_name= c("my_char", "Jordi")
my_name= c(my_char, "Jordi")
my_name
paste(my_name, collapse= " ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
add2 <- funcion(x,y){
x+y
}
add(3,5)
add2(3,5)
add2 <- funcion(x,y){
x+y
}
add2 <- funcion(x,y){
x+y
}
add2 <- funcion(x,y){
x+y
}
add2 <- funcion(x,y){
x+y
}
add2 <- funcion(x,y) {
x+y
}
add2 <- function(x,y) {
x+y
}
add2(3,5)
add2 <- function(x,y) {
x+y
}
above10 <- function(x){
use <-x>10
x[use]
}
above <- function(x,n){
use <-x>n
x[use]
}
x <- 1:20
above(x, 12 )
above <- function(x,n=10){
above <- function(x,n=10){
use <-x>n
x[use]
}
above(x)
above10 <- function(x){
use <-x>10
x[use]
}
x <-10
m <- NULL
x <<- y
x = numeric()
x <<- y
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
swirl()
load(swirl)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
one <- makeVector()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
one <- makeVector()
one$set(1:3)
setwd("~/R/ProgrammingAssignment2")
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x*3
y <-rnorm(1000)
<- rep(NA, 1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
x <- [1:3; 4:6; 7:9]
A = matrix( c(2, 4, 6, 8, 10, 11), nrow = 3, ncol = 2)
A
M = makeCacheMatrix(A)
M$get()
M$set(c(2, 4, 6, 8, 10, 12), nrow = 3, ncol = 2))
M$set(c(2, 4, 6, 8, 10, 12), nrow = 3, ncol = 2)
M$set(c(2, 4, 6, 8, 10, 12))
M$get()
M$set(M)
M$set((c(2, 4, 6, 8, 10, 12), nrow = 3, ncol = 2))
M$set(A)
M$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mean) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
M= matrix(c(1,2,3,4,5,6,7,8), nrow=2, ncol=2)
M
M= matrix(c(1,2,3,4,5,6,7,8), nrow=3, ncol=3)
M= matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
M
cacheSolve(M)
traceback()
View(cacheSolve)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1,2,3,4,5,6,7,8))
a <- makeVector(c(1,2,3,4))
cachemean (a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mean) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
M= matrix(c(1:9), nrow = 3, ncol = 3)
makeCacheMatrix(M)
A= makeCacheMatrix(M)
cacheSolve(A)
traceback()
cacheSolve(A)
n
M= matrix(c(2,3,5,0,0,1,1,0,1), nrow = 3, ncol = 3)
A=makeCacheMatrix(M)
cacheSolve(A)
